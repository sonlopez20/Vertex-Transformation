#----------------------------------------------------------------------
Assignment 01

#----------------------------------------------------------------------
Purpose:

  * Demonstrate ability to load a SVFM (Simple Vertex Face Model)
    file.

  * Demonstrate ability to write some (simple) C code.

#----------------------------------------------------------------------
Background:

  * SVFM files are as discussed in class:
    - Blank lines are to be ignored.  (A blank line has no
      characters at all or is just whitespace.)

    - Lines with '#' as the first non-whitespace character are
      comments and are to be ignored.

    - Lines with 'v' as the first non-whitespace character are
      Vertex lines.  There will be three numbers following the
      'v': the X, Y, and Z coordinates of the vertex.  The 'v' and
      the coordinates will be separated by whitespace.  Example:

        v 27.34  16  8.9

    - Lines with 'f' as the first non-whitespace character are
      Face lines.  There will be three integers following the
      'f': the numbers of the three vertices making up the face.
      (Faces are triangles.)  The 'f' and the vertex numbers will
      be separated by whitespace.  Example:

        f  17   23   56

      In the SVFM file, the vertices are numbered 1 to n.  In
      your program, the vertices will be refered to as 0 to n-1.
      Remember to subtract one from each vertex number in each
      face as you read them in.

    - If a line starts with any other non-whitespace character, it
      should be silently ignored.  ('silently' means you should
      not print an error message.  Just ignore it.)

#----------------------------------------------------------------------
Tasks:

  1. Download hmwk_01_dalioba.zip from Canvas.

  2. Unzip the file somewhere convenient.

  3. Change 'dalioba' in the name of the directory to your NetID.
     (Your NetID is three letters followed by four or five digits.
      The directory name will now be something like
      'hmwk_01_abc1234' but with _your_ NetID in place of
      'abc1234'.)

  4. Look in that directory.

  5. Change the header lines in the file all of the .c files.

      -- Line 1:  Family name first, then a comma, then
                  personal name.

      -- Line 2:  Your NetID.

      -- Line 3:  The date you edited the file, in the format
                  YYYY-MM-DD.

     These three lines must remain the first three lines in the
     files.  Do NOT change anything in the header (.h) files!

  6. There are a number of TODO: comments in the model.c,
     vertex.c, and face.c files that need to be replaced with the
     appropriate C code.

     Here's a list:

face.c:12:    // TODO: Put a printf here that dumps the given face's ...
model.c:14:   // TODO: Allocate a Model structure. ...
model.c:50:   // TODO: Free the vertex and face data of the given model. ...
model.c:57:   // TODO: Open the file indicated by fName. ...
vertex.c:12:  // TODO: Put a printf here that dumps the given vertex's ...

  7. When you have done so, compile and run everything as shown.
     You should observe the given output.

$ gcc -o hmwk_01 hmwk_01.c model.c vertex.c face.c
$ ./hmwk_01 pyramid.svfm
#- Model parameters --------------------
Vertex count :     5
Face count   :     6

#- Vertex list -------------------------
  [    0]       0.000000,      0.000000,      0.000000
  [    1]       0.800000,      0.000000,      0.000000
  [    2]       0.000000,      0.800000,      0.000000
  [    3]       0.800000,      0.800000,      0.000000
  [    4]       0.400000,      0.400000,      0.700000

#- Face list ---------------------------
  [    0]      3,     1,     0
  [    1]      2,     3,     0
  [    2]      1,     4,     0
  [    3]      4,     2,     0
  [    4]      1,     3,     4
  [    5]      2,     4,     3
#---------------------------------------
$

     Your output should match this EXACTLY.  'EXACTLY' means just
     that.  It should be the same character-by-character.  When
     your program is tested, it will be run against other data
     files and the output compared using diff.

  8. Run your program again, this time using Monkey.svfm as the
     input file.  Your output should match that given in the
     corresponding results file, Results/Monkey_results.txt.  (The
     results file for the pyramid case is included for your
     reference as well.)

  9. Use diff (fc on Windows) to compare your output to that of
     the results file.  They should match with NO DIFFERENCES.

#----------------------------------------------------------------------
Submission:

Make a zipfile of your 'hmwk_01_abc1234' directory (with your
source files in it) and submit it on Canvas as your results
for this assignment.

You can get dinged points for work not in the proper format so
even if your program works (and works correctly!), you might not
earn full credit.  Check your work!

#----------------------------------------------------------------------
Hints:
  1. Ensure your program compiles and runs correctly.  Not
     compiling or not generating the correct output as shown in
     the results files will cost you points.

     The output from your program will be compared using diff
     against the reference results so ensure you DO NOT CHANGE
     anything aside from the indicated TODO spots.  In particular,
     do not change ANYTHING in the header (.h) files.

     Ensure that your output matches EXACTLY that shown in the
     corresponding results file.  'EXACTLY' mean just that.  It
     must be identical character-by-character.  No differences in
     spacing, values, punctuation, etc.

  2. Ensure that you update the three header lines in the source
     .c files with YOUR name (family name first, then a comma,
     then your personal name), YOUR NetID, and the date you edit
     the file (in the format YYYY-MM-DD).

     Not updating the header lines properly will cost you points.

     Not having the header lines as the first three lines in the
     files will cost you points.

  3. This is not a hard assignment.  There are only five (5) TODO
     spots that need to be filled in.

face.c:12:    // TODO: Put a printf here that dumps the given face's ...
     - One (1) line of code!

model.c:14:   // TODO: Allocate a Model structure. ...
     - Twenty-three (23) lines of code.  (This includes checking
       the results of calloc and printing error messages when
       those calls fail.)

model.c:50:   // TODO: Free the vertex and face data of the given model. ...
     - Seven (7) lines of code.

model.c:57:   // TODO: Open the file indicated by fName. ...
     - Fifty-two (52) lines of code.  OK, this is the long one.

       It's not difficult, however, if you go about the problem
       in an organized way.  getline() will probably be useful
       when reading the lines.  isspace() will tell you whether a
       character is whitespace or not.

       I'll give you one useful hint for free (hey, who's a nice
       guy?).  I read the input file TWICE.  The first time I just
       counted the lines that were 'v' or 'f'.  After allocating
       the Model structure, I read the file a second time and put
       each vertex's and face's data in the correct place.  (Don't
       forget to subtract one from each vertex number of each face
       so it can be used as an index in to the vertex array!)

       rewind() will back a file up to the beginning so you can
       read it again.

vertex.c:12:  // TODO: Put a printf here that dumps the given vertex's ...
     - One (1) line of code!

     By the way, don't get too concerned if you don't get the same
     number of lines of code that I state here.  These numbers are
     just a guide so you can see if you're on the correct track or
     not.

     It's OK to have a few more or less when you write it.  (I put
     all closing braces on their own lines, so my code tends to be
     a bit longer.)

     On the other hand, if you find yourself writing a LOT more
     code than this, you're probably going down the wrong track.

  4. Ensure your submission is packaged EXACTLY as described above.

      -- Your submission should be a ZIP FILE (not a tar, rar, gz,
         or any other kind of compressed file).

      -- The zip file should be named 'hmwk_01_abc1234.zip' (with
         'abc1234' replaced with YOUR NetID).

      -- This zip file should have ONE item in it, a directory
         named 'hmwk_01_abc1234'  (with 'abc1234' replaced with
         YOUR NetID).

      -- Your source files should be in that directory.  Do NOT
         change the names of any of the source files.  They
         should be hmwk_01.c, model.c, vertex.c, and face.c.

     Submissions in the wrong format score ZERO points.

  5. After you submit your zip file on Canvas, download it
     from Canvas and check that your submission is in the
     proper format, that the program runs and prints the correct
     output, and that you updated the header lines correctly in
     the .c source files.

  6. Are you CERTAIN you complied with all of these nit-picking
     instructions?  Really?  Maybe you ought to check just one
     more time. :)

#----------------------------------------------------------------------
